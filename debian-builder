#!/bin/bash
. builds/.env-debian

function build() {
    # Clean builds folders
    echo "----------- BUILD START"
    echo "Clean old data"
    rm -r "$USR" "$ETC" 2> /dev/null

    # Create new folders
    echo "Build deb arch"
    mkdir "$ETC" "$USR" "$SHARE" "$BIN"

    # Copy bin to /usr/bin
    echo "Move bin files"
    cp -r "$SRC_MODULE/bin/"* "$BIN"

    # Move private to bin
    mv "$BIN/private/"* "$BIN"

    # rm private folder
    rmdir "$BIN/private"

    # Rename files in bin
    for f in $(find $BIN -type f); do 
        name=$(basename $f)
        mv -- "$f" "$BIN/$MODULE_NAME-$name" ; 
    done
    mv "$BIN/$MODULE_NAME-main" "$BIN/$MODULE_NAME"

    # Copy config files to /etc 
    echo "Move other files to etc"
    cp -r "$SRC_MODULE/src" "$ETC/$MODULE_NAME" 
    mv "$ROOT/$ANSIBLE_PLAYBOOK.base" "$ROOT/$ANSIBLE_PLAYBOOK"
    mv "$ROOT/$ANSIBLE_VARS.base" "$ROOT/$ANSIBLE_VARS"
    mv "$ROOT/$ANSIBLE_INVENTORY.base" "$ROOT/$ANSIBLE_INVENTORY"
    mv "$ROOT/$VAGRANT_FILE.base" "$ROOT/$VAGRANT_FILE"

    # Remove git repo
    find "$ROOT" -name ".git" -exec rm {} \;

    # Edit files to install absolute path
    echo "Translate variables and pattern to absolute path"
    for file in $(find $ROOT -not \( -path $ANSIBLE_ROLES -prune \) -type f); do
        # Pattern remplacement
        sed -i "s@. {ENV_LOCATION}@mkdir -p \"$TMP\" \"$CONF\" 2>/dev/null@" "$file"
        sed -i "s@{MODULE_NAME}@$MODULE_NAME@" "$file"
        sed -i "s@{BIN_PRIVATE}/@$MODULE_NAME-@" "$file"

        # Variable remplacement
        # $HOME
        sed -i "s@\$ANSIBLE_INVENTORY_LOCAL@$ANSIBLE_INVENTORY_LOCAL@" "$file"
        sed -i "s@\$ANSIBLE_PLAYBOOK_LOCAL@$ANSIBLE_PLAYBOOK_LOCAL@" "$file"
        sed -i "s@\$ANSIBLE_VARS_LOCAL@$ANSIBLE_VARS_LOCAL@" "$file"
        sed -i "s@\$VAGRANT_USER_FOLDER@$VAGRANT_USER_FOLDER@" "$file"
        sed -i "s@\$VAGRANT_FILE_LOCAL@$VAGRANT_FILE_LOCAL@" "$file"
        sed -i "s@\$TMP@$TMP@" "$file"
        sed -i "s@\$CONF@$CONF@" "$file"
        sed -i "s@\$HOSTS@$HOSTS@" "$file"
        sed -i "s@\$VBOX@$VBOX@" "$file"
        sed -i "s@\$DEL_VBOX@$DEL_VBOX@" "$file"

        # /etc/module
        sed -i "s@\$ANSIBLE_INVENTORY@$ANSIBLE_INVENTORY@" "$file"
        sed -i "s@\$ANSIBLE_PLAYBOOK@$ANSIBLE_PLAYBOOK@" "$file"
        sed -i "s@\$ANSIBLE_VARS@$ANSIBLE_VARS@" "$file"
        sed -i "s@\$VAGRANT_FILE@$VAGRANT_FILE@" "$file"
    done

    # Change access right
    echo "Change access right"
    chmod -R 755 builds/debian

    echo "----------- Project can now be packaged"
}

function package() {
    # Package the .deb file
    echo "----------- PACKAGING START"
    rm "$OUTPUT/$MODULE_NAME.deb" 2> /dev/null
    mkdir "$OUTPUT"  2> /dev/null
    dpkg-deb --build "builds/debian" "$OUTPUT/$MODULE_NAME.deb"
    if [[ $? -eq 0 ]]; then
        echo "----------- PACKAGING Success"
    else
        echo "----------- PACKAGING ERROR"
        echo "ABORTED."
        exit 1
    fi
}

##################################### CODE START HERE
if [[ $# -eq 0 ]]; then
    build
    package
elif [[ ( $# -eq 1 ) && ( "$1" == "-build" ) ]]; then
    build
elif [[ ( $# -eq 1 ) && ( "$1" == "-pack" ) ]]; then
    package
else
    echo "Build + pack : debian-builder"
    echo "Build : debian-builder -build"
    echo "Pack : debian-builder -pack"
fi